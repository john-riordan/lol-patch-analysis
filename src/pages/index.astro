---
import ChampionGrid from '../components/ChampionGrid.svelte';

import {
  ENDPOINT_PATCHES,
  ENDPOINT_CHAMPIONS,
  ENDPOINT_CHAMP_REPORT,
} from '../constants.js';
import {
  asPercent,
  formatPatchVersion,
  analyzePatchData,
  prDiffColor,
  wrDiffColor,
  buildChampionsList,
} from '../helpers.js';
import { GQL_URL, QUERY_AGG_STATS, requestPatchData } from '../api.js';

let champions;
let patchLatest;
let patchlist = [];
let patchPrevious;
let report1;
let report2;

const patchesRes = await fetch(ENDPOINT_PATCHES);
const patches = await patchesRes.json();

if (patches.data.length) {
  patchLatest = patches.data[0];
  patchPrevious = patches.data[1];

  patchlist = patches.data.map(patch => formatPatchVersion(patch.patch));
}

const championsRes = await fetch(ENDPOINT_CHAMPIONS(patchLatest.patch));
const championsdata = await championsRes.json();

if (championsdata?.data) {
  champions = championsdata.data;
}

const [p1, p2] = await Promise.all([
  fetch(ENDPOINT_CHAMP_REPORT(patchlist[0])),
  fetch(ENDPOINT_CHAMP_REPORT(patchlist[1])),
]);

report1 = await p1.json();
report2 = await p2.json();
const reports = [report1?.data, report2?.data].filter(Boolean);

const currPatchData = await fetch(GQL_URL, requestPatchData(patchLatest.patch));
const prevPatchData = await fetch(
  GQL_URL,
  requestPatchData(patchPrevious.patch)
);
const currPatchRes = await currPatchData.json();
const preventPatchRes = await prevPatchData.json();

const { newChamps, playrateJumps, winrateJumps, bigMovers } = analyzePatchData(
  champions,
  [currPatchRes?.data.allChampionStats, preventPatchRes?.data.allChampionStats]
);
const lists = [
  {
    title: 'Play Rate *AND* Win Rate Movers',
    type: 'both',
    entries: bigMovers,
  },
  {
    title: 'Play Rate Movers',
    type: 'playrate',
    entries: playrateJumps,
  },
  {
    title: 'Win Rate Movers',
    type: 'winrate',
    entries: winrateJumps,
  },
  { title: '*New*', type: 'new', entries: newChamps },
];
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/x-icon" href="/favicon.ico" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:wght@500;600;700&display=swap"
      rel="stylesheet" />
    <link
      rel="stylesheet"
      href="https://blitz-cdn-plain.blitz.gg/blitz/css/BlitzUI/BlitzUI-v2-theme.css" />
    <meta name="viewport" content="width=device-width" />
    <title>League Patch Analysis</title>
  </head>

  <body>
    <div class="game-counts">
      <div>
        <p class="type-h4">Patch {patchLatest.patch}</p>
        <span class="type-caption games"
          >{patchLatest.games.toLocaleString()}</span>
      </div>
      <span class="vs">vs</span>
      <div>
        <p class="type-h4">Patch {patchPrevious.patch}</p>
        <span class="type-caption games"
          >{patchPrevious.games.toLocaleString()}</span>
      </div>
    </div>
    <ChampionGrid
      data={lists}
      gqlData={currPatchRes?.data.allChampionStats}
      client:idle />
  </body>
</html>

<style lang="scss">
  body {
    background: var(--shade9);
    color: var(--shade0);
    max-width: 1500px;
    min-height: calc(100vh + 1px);
    margin-inline: auto;
    padding-bottom: 10rem;
    padding-top: 2rem;
    padding-inline: 0.5rem;
  }

  header {
    margin-bottom: 1rem;
  }

  .game-counts {
    display: flex;
    align-items: center;
    gap: 2rem;
    margin-bottom: 2rem;

    .games {
      color: var(--shade2);
    }

    .vs {
      color: var(--shade3);
    }
  }
</style>
