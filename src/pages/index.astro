---
import {
  ENDPOINT_PATCHES,
  ENDPOINT_CHAMPIONS,
  ENDPOINT_CHAMP_REPORT,
} from '../constants.js';
import {
  asPercent,
  formatPatchVersion,
  analyzePatchData,
  prDiffColor,
  wrDiffColor,
} from '../helpers.js';

let champions;
let patchLatest;
let patchPrevious;
let reportLatest;
let reportPrevious;

const patchesRes = await fetch(ENDPOINT_PATCHES);
const patches = await patchesRes.json();

if (patches.data.length) {
  patchLatest = patches.data[0];
  patchPrevious = patches.data[1];
}

const championsRes = await fetch(
  ENDPOINT_CHAMPIONS(patchLatest.ddragon_version)
);
const championsdata = await championsRes.json();

if (championsdata?.data) {
  champions = championsdata.data;
}

const [reportLatestRes, reportPreviousRes] =
  await Promise.all([
    fetch(
      ENDPOINT_CHAMP_REPORT(
        formatPatchVersion(patchLatest.ddragon_version)
      )
    ),
    fetch(
      ENDPOINT_CHAMP_REPORT(
        formatPatchVersion(patchPrevious.ddragon_version)
      )
    ),
  ]);

reportLatest = await reportLatestRes.json();
reportPrevious = await reportPreviousRes.json();

if (reportLatest.data) {
  reportLatest = reportLatest.data;
}

if (reportPrevious.data) {
  reportPrevious = reportPrevious.data;
}

const {
  newChamps,
  playrateJumps,
  winrateJumps,
  bigMovers,
} = analyzePatchData(
  champions,
  reportLatest,
  reportPrevious
);
const lists = [
  {
    title: 'Play Rate *AND* Win Rate Movers',
    type: 'both',
    entries: bigMovers,
  },
  {
    title: 'Play Rate Movers',
    type: 'playrate',
    entries: playrateJumps,
  },
  {
    title: 'Win Rate Movers',
    type: 'winrate',
    entries: winrateJumps,
  },
  { title: '*New*', type: 'new', entries: newChamps },
];
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link
      rel="icon"
      type="image/x-icon"
      href="/favicon.ico" />
    <link
      rel="preconnect"
      href="https://fonts.googleapis.com" />
    <link
      rel="preconnect"
      href="https://fonts.gstatic.com"
      crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:wght@500;600;700&display=swap"
      rel="stylesheet" />
    <link
      rel="stylesheet"
      href="https://blitz-cdn-plain.blitz.gg/blitz/css/BlitzUI/BlitzUI-v2-theme.css" />
    <meta name="viewport" content="width=device-width" />
    <title>League Patch Analysis</title>
  </head>

  <body>
    <header>
      <h1>
        Comparing Patch {formatPatchVersion(patchLatest.ddragon_version)}
        to {formatPatchVersion(patchPrevious.ddragon_version)}
      </h1>
      <div class="game-counts">
        <div>
          <p class="type-overline">
            {formatPatchVersion(patchLatest.ddragon_version)}
          </p>
          <p class="type-body1">
            {patchLatest.games.toLocaleString()} Games
          </p>
        </div>
        <div>
          <p class="type-overline">
            {formatPatchVersion(patchPrevious.ddragon_version)}
          </p>
          <p class="type-body1">
            {patchPrevious.games.toLocaleString()} Games
          </p>
        </div>
      </div>
    </header>
    <div class="lists">
      {lists.map(list => <div>
          <h4 class='type-subtitle1 title'>{list.title}</h4>
          <ol class='entries' data-list-type={list.type}>
            {list.entries.map( (champion, index) => <li class='entry'>
                  <h4 class='index'>#{index + 1}</h4>
                  <div class='img'>
                    <img src={champion.image} height='40' width='40' />
                  </div>
                  <div class='info'>
                    <p class='type-overline role'>
                      {champion.role}
                    </p>
                    <p class='type-h6 name'>
                      {champion.name}
                    </p>
                    {champion.playrateDiff && <div class='stats' data-wr-gain={champion.winrateDiff > 0 && 'true'} data-pr-gain={champion.playrateDiff > 0 && 'true'}>
                        <div class='playrate' style={`--diff: ${prDiffColor(champion.playrateDiff)}`}>
                          <span class='type-overline'>
                            Role %
                          </span>
                          <p class='type-h6'>
                            {asPercent(champion.latest.rolePercent)} <span class='type-caption--bold super'>
                              {asPercent(champion.playrateDiff)}
                            </span>
                          </p>
                        </div>
                        <div class='winrate' style={`--diff: ${wrDiffColor(champion.winrateDiff)}`}>
                          <span class='type-overline'>
                            Win-rate
                          </span>
                          <p class='type-h6'>
                            {asPercent(champion.latest.winrate)} <span class='type-caption--bold super'>
                              {asPercent(champion.winrateDiff)}
                            </span>
                          </p>
                        </div>
                      </div>}
                  </div>
                </li> )}
          </ol>
        </div>)}
    </div>
  </body>
</html>

<style lang="scss">
  body {
    background: var(--shade9);
    color: var(--shade0);
    max-width: 1500px;
    margin-inline: auto;
    padding-bottom: 10rem;
    padding-top: 2rem;
  }

  header {
    margin-bottom: 3rem;
  }

  .game-counts {
    display: flex;
    gap: 2rem;
    margin-top: 1rem;
    color: var(--shade2);
  }

  .title {
    margin-bottom: 0.5rem;
  }

  .lists {
    --gap: var(--sp-2);

    display: flex;
    flex-direction: column;
    gap: calc(var(--gap) * 6);

    > * {
      flex: 1;
    }
  }

  .entries {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    gap: var(--gap);
  }

  .entry {
    position: relative;
    display: flex;
    align-items: flex-start;
    padding: var(--sp-5);
    padding-right: var(--sp-10);
    background: var(--shade7);
    border-radius: var(--br);
    transform: translate3d(0, 0, 0) scale(1);
    overflow: hidden;
    box-shadow: var(--highlight);
    transition: background var(--transition),
      box-shadow var(--transition);

    &:hover {
      background: hsla(var(--shade6-hsl) / 0.5);
      box-shadow: var(--highlight),
        0 0 20px 5px var(--shade10);
    }

    .index {
      position: absolute;
      top: -0.65ch;
      right: 0.15ch;
      font-size: 3.5rem;
      opacity: 0.15;
      color: var(--shade3);
    }

    .img {
      position: relative;
      margin-right: var(--sp-4);
      border-radius: var(--br);
      width: 40px;
      aspect-ratio: 1;
      overflow: hidden;

      img {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%) scale(1.15);
      }
    }

    .info {
      flex: 1;
    }
    .role {
      color: var(--shade1);
      margin-bottom: var(--sp-1);
    }
    .stats {
      display: flex;
      justify-content: space-between;
      margin-top: var(--sp-5);
    }
    .type-overline {
      display: block;
      margin-bottom: var(--sp-1);
      color: var(--shade2);
    }
    .super {
      vertical-align: super;
      color: var(--diff);
    }
    .super::before {
      content: '';
      margin-left: 0.5ch;
    }
    [data-wr-gain='true'] .winrate .super::before {
      content: '+';
    }
    [data-pr-gain='true'] .playrate .super::before {
      content: '+';
    }
  }

  [data-list-type='both'] {
    .index {
      color: var(--yellow);
      opacity: 0.1;
    }
    .name {
      color: var(--yellow);
    }
    .entry {
      background: hsla(var(--yellow-hsl) / 0.1);
      border: 1px solid hsla(var(--yellow-hsl) / 0.15);

      &:hover {
        background: hsla(var(--yellow-hsl) / 0.13);
      }
    }
  }

  [data-list-type='playrate'] .stats .winrate {
    --diff: var(--shade3) !important;
  }
  [data-list-type='winrate'] .stats .playrate {
    --diff: var(--shade3) !important;
  }
</style>
